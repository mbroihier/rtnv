package com.example.broihier.rtnv;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class StockDatabaseHelper extends SQLiteOpenHelper {

    /* StockDatabaseHelper class                                                                                     */
    /* ============================================================================================================= */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Description:                                                                                                  */
    /*     This class extends the SQLiteOpenHelper class to support the construction and maintenance of the          */
	/* stock.sqlite database.                                                                                        */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ============================================================================================================= */
	private static final String DB_NAME = "stock.sqlite";
	private static final int VERSION=1;
	private static final String TABLE_STOCK = "stock";
	private static final String COLUMN_TICKER = "ticker";
	private static final String COLUMN_NUMBER_OF_SHARES="number_of_shares";
	private static final String COLUMN_VALUE_OF_A_SHARE="value_of_a_share";
	
	
	private Cursor cursor = null;
	
	public StockDatabaseHelper (Context context) {
		super(context, DB_NAME,null,VERSION);
    /* StockDatabaseHelper - constructor                                                                             */
    /* ============================================================================================================= */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Description:                                                                                                  */
    /*     This method creates a stock SQLite database helper that initializes the stock database when one           */
    /* doesn't exit and maintains one thereafter.                                                                    */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Inputs:                                                                                                       */
    /*     Mnemonic      Parameter                      Source                                                       */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Processing:                                                                                                   */
    /*   do nothing but call the base constructor;                                                                   */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Outputs:                                                                                                      */
    /*     Mnemonic      Parameter                      Destination                                                  */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ============================================================================================================= */
	}
	@Override
	public void onCreate(SQLiteDatabase db) {
    /* onCreate - method that creates the database if it doesn't exist                                               */
    /* ============================================================================================================= */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Description:                                                                                                  */
    /*     This method creates a stock SQLite database in the event that a database is found to not exist.           */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Inputs:                                                                                                       */
    /*     Mnemonic      Parameter                      Source                                                       */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*     db            stock database                 base class                                                   */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Processing:                                                                                                   */
    /*   create stock.sqlite database;                                                                               */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Outputs:                                                                                                      */
    /*     Mnemonic      Parameter                      Destination                                                  */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ============================================================================================================= */
		Log.d("rtnv","onCreate within StockDatabaseHelper");
		db.execSQL("create table stock (ticker varchar(10), number_of_shares real, value_of_a_share real)");

	}

	@Override
	public void onUpgrade(SQLiteDatabase arg0, int arg1, int arg2) {
		// TODO Auto-generated method stub

	}
    public long update(Stock stock) {
    /* update - method that updates the database with a new instance of a stock removing any old instance first      */
    /* ============================================================================================================= */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Description:                                                                                                  */
    /*     This method replaces a stock currently in the database.                                                   */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Inputs:                                                                                                       */
    /*     Mnemonic      Parameter                      Source                                                       */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*     stock         new stock to put into the                                                                   */
    /*                   database                       calling object                                               */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Processing:                                                                                                   */
    /*   delete any old entry with the same ticker;                                                                  */
    /*   insert a new stock entry;                                                                                   */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Outputs:                                                                                                      */
    /*     Mnemonic      Parameter                      Destination                                                  */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*                                                  updated SQLite database                                      */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ============================================================================================================= */
    	Log.d("rtnv","in update for object Stock");
    	ContentValues cv = new ContentValues();
    	cv.put(COLUMN_TICKER, stock.getTicker());
    	cv.put(COLUMN_NUMBER_OF_SHARES, stock.getNumberOfShares());
    	cv.put(COLUMN_VALUE_OF_A_SHARE, stock.getValueOfEachShare());
    	getWritableDatabase().delete(TABLE_STOCK, "ticker = ?", new String[] {stock.getTicker() } );
    	return getWritableDatabase().insert(TABLE_STOCK,null,cv);
    }
    public long delete(Stock stock) {
    /* delete - method that deletes a stock from the database stock                                                  */
    /* ============================================================================================================= */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Description:                                                                                                  */
    /*     This method removes a stock from the database.                                                            */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Inputs:                                                                                                       */
    /*     Mnemonic      Parameter                      Source                                                       */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*     stock         stock to remove from the                                                                    */
    /*                   database                       calling object                                               */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Processing:                                                                                                   */
    /*   delete any old entry with the same ticker;                                                                  */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Outputs:                                                                                                      */
    /*     Mnemonic      Parameter                      Destination                                                  */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*                                                  updated SQLite database                                      */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ============================================================================================================= */
    	return getWritableDatabase().delete(TABLE_STOCK, "ticker = ?", new String[] {stock.getTicker() } );
    }
    public void reset() {   	
    /* reset - method that creates a cursor for listing the entire contents of the database                          */
    /* ============================================================================================================= */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Description:                                                                                                  */
    /*     This method performs a query and stores a private cursor for listing the database.                        */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Inputs:                                                                                                       */
    /*     Mnemonic      Parameter                      Source                                                       */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Processing:                                                                                                   */
    /*   query the database with a select * all columns;                                                             */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Outputs:                                                                                                      */
    /*     Mnemonic      Parameter                      Destination                                                  */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*     cursor        cursor to a listing of db      local to this object                                         */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ============================================================================================================= */
    	cursor = getReadableDatabase().query(TABLE_STOCK, null, null, null, null, null, null);
    }
    public Stock get() {
    /* get - method that gets the next entry of the database and returns it to the caller                            */
    /* ============================================================================================================= */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Description:                                                                                                  */
    /*     This method gets the next database entry based on the cursor "position".                                  */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Inputs:                                                                                                       */
    /*     Mnemonic      Parameter                      Source                                                       */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Processing:                                                                                                   */
    /*   if cursor is good then                                                                                      */
    /*     advance cursor;                                                                                           */
    /*     get stock parameters;                                                                                     */
    /*   else                                                                                                        */
    /*     build null stock;                                                                                         */
    /*   return stock;                                                                                               */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Outputs:                                                                                                      */
    /*     Mnemonic      Parameter                      Destination                                                  */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*                   next stock in the                                                                           */
    /*                   database                       calling object                                               */
    /*     cursor        updated cursor                 local to this object                                         */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ============================================================================================================= */
    	if (cursor == null) {
    		Log.d("rtnv","in get for object Stock - cursor was null - reseting");
    		reset();
    	}
    	if (cursor == null || cursor.isAfterLast() /*|| cursor.isBeforeFirst()*/) {
    		Log.d("rtnv","in get for object Stock - cursor was null");
    		return new Stock("",0.0,0.0);
    	} else {
    		Log.d("rtnv","in get for object Stock - cursor was not null");
    		cursor.moveToNext();
    		if (cursor.isAfterLast()) {
    			return new Stock("",0.0,0.0);
    		}
    		String ticker = cursor.getString(0);
    		double numberOfShares = cursor.getDouble(1);
    		double valueOfShares = cursor.getDouble(2);
    		Log.d("rtnv","in get for object Stock - cursor contents: ticker:"+ticker+", number of shares: "+numberOfShares+", value of a share: "+valueOfShares);
    		//cursor.moveToNext();
    		return new Stock(ticker,numberOfShares,valueOfShares);
    	}
    }
    public void close() {
    /* close - close database                                                                                        */
    /* ============================================================================================================= */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Description:                                                                                                  */
    /*     This method closes the database.                                                                          */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Inputs:                                                                                                       */
    /*     Mnemonic      Parameter                      Source                                                       */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Processing:                                                                                                   */
    /*   if cursor is valid then close the database;                                                                 */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ------------------------------------------------------------------------------------------------------------- */
    /*                                                                                                               */
    /* Outputs:                                                                                                      */
    /*     Mnemonic      Parameter                      Destination                                                  */
    /*   ___________    ___________                     ____________________________________________________________ */
    /*                                                  updated SQLite database                                      */
    /*                                                                                                               */
    /* ------------------------------------------------------------------------------------------------------------- */
    /* ============================================================================================================= */
    	if (cursor != null) {
    		cursor.close();
    	}
    }
}
